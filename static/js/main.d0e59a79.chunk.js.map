{"version":3,"sources":["reducer.js","App.jsx","index.js"],"names":["state","action","type","temperature","payload","position","lon","lat","city","inpCity","isLoading","weather","App","useReducer","reducer","dispatch","toCelcius","temp","Math","round","getGeolocation","navigator","geolocation","getCurrentPosition","pos","console","log","crd","coords","geo","latitude","longitude","getWeather","err","enableHighAccuracy","timeout","maximumAge","a","location","options","method","url","params","appid","lang","q","axios","request","then","res","data","dt","list","main","name","catch","error","useEffect","className","value","onChange","e","target","placeholder","animateToNumber","animationType","Object","keys","length","src","hours","Date","getHours","path","getIcon","alt","description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0e59a79.chunk.js","sourcesContent":["export default (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_TEMPERATURE':\r\n      return {\r\n        ...state,\r\n        temperature: action.payload,\r\n      };\r\n\r\n    case 'SET_POSITION':\r\n      return {\r\n        ...state,\r\n        position: {\r\n          lon: action.payload.lon,\r\n          lat: action.payload.lat,\r\n        },\r\n      };\r\n    case 'SET_CITY':\r\n      return {\r\n        ...state,\r\n        city: action.payload,\r\n      };\r\n    case 'SET_INPUT_CITY':\r\n      return {\r\n        ...state,\r\n        inpCity: action.payload,\r\n      };\r\n    case 'SET_LOADING':\r\n      return {\r\n        ...state,\r\n        isLoading: {\r\n          temperature: action.payload?.temperature,\r\n          city: action.payload?.city,\r\n        },\r\n      };\r\n    case 'SET_WEATHER':\r\n      return {\r\n        ...state,\r\n        weather: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { useEffect, useReducer, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport reducer from './reducer'\r\n\r\nimport AnimatedNumber from \"react-animated-numbers\"\r\n\r\nimport './scss/App.scss'\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    city: '',\r\n    temperature: 0,\r\n    inpCity: '',\r\n    position: {},\r\n    isLoading: {},\r\n    weather: {\r\n    }\r\n  })\r\n\r\n  function getIcon(data) {\r\n    const hours = new Date(data.dt).getHours()\r\n    let path = './img/weather_icons/animated/'\r\n\r\n    if (hours < 20 && hours >= 6) {\r\n      switch (data.main) {\r\n        case 'Thunderstorm':\r\n          return path + 'thunder.svg'\r\n      \r\n        case 'Drizzle':\r\n          return path + 'rainy-4.svg'\r\n      \r\n        case 'Rain':\r\n          return path + 'rainy-6.svg'\r\n      \r\n        case 'Snow':\r\n          return path + 'snowy-5.svg'\r\n      \r\n        case 'Clear':\r\n          return path + 'day.svg'\r\n      \r\n        case 'Clouds':\r\n          return path + 'cloudy.svg'\r\n      \r\n        default:\r\n          return ''\r\n      }\r\n    } else{\r\n      switch (data.main) {\r\n        case 'Thunderstorm':\r\n          return path + 'thunder.svg'\r\n      \r\n        case 'Drizzle':\r\n          return path + 'rainy-4.svg'\r\n      \r\n        case 'Rain':\r\n          return path + 'rainy-6.svg'\r\n      \r\n        case 'Snow':\r\n          return path + 'snowy-5.svg'\r\n      \r\n        case 'Clear':\r\n          return path + 'night.svg'\r\n      \r\n        case 'Clouds':\r\n          return path + 'cloudy-night-3.svg'\r\n      \r\n        default:\r\n          return ''\r\n      }\r\n    }\r\n\r\n    \r\n    \r\n  }\r\n  \r\n\r\n  function toCelcius(temp) {\r\n    if (!temp || typeof temp !== 'number') return 0\r\n    return Math.round(temp - 273.15);\r\n  }\r\n\r\n  function getGeolocation() {\r\n\r\n     navigator.geolocation.getCurrentPosition(pos => {\r\n       console.log(pos);\r\n      const crd = pos.coords\r\n      let geo = {\r\n        lat: crd.latitude,\r\n        lon: crd.longitude\r\n      }\r\n      dispatch({\r\n        type: 'SET_POSITION',\r\n        payload: geo\r\n      })\r\n      // setPosition(geo)\r\n      console.log(state.position);\r\n      console.log('position success');\r\n\r\n      getWeather(geo)\r\n\r\n\r\n    }, (err) => {\r\n      console.log('position error');\r\n      console.log(err);\r\n      dispatch({\r\n        type: 'SET_POSITION',\r\n        payload: {}\r\n      })\r\n      // setPosition({})\r\n    }, { \r\n      enableHighAccuracy: true,\r\n      timeout: 50000,\r\n      maximumAge: 5000\r\n    })\r\n\r\n  }\r\n\r\n  function onChangeCity(e) {\r\n    // setInpCity(e.target.value)\r\n    dispatch({\r\n      type: 'SET_INPUT_CITY',\r\n      payload: e.target.value\r\n    })\r\n    \r\n  }\r\n\r\n  async function getWeather(location = {}) {\r\n    const options = {\r\n      method: 'GET',\r\n      url: 'https://api.openweathermap.org/data/2.5/forecast',\r\n      params: {\r\n        appid: 'a482831921ae4546e7f36c4415ede7b8',\r\n        lang: 'ru',\r\n        temp: 'Celsius',\r\n        \r\n      }\r\n    };\r\n\r\n    if (state.inpCity){\r\n      options.params.q = state.inpCity\r\n    } else if(state.position.lon){\r\n      options.params.lon = state.position.lon\r\n      options.params.lat = state.position.lat\r\n\r\n    } else if(location.lon){\r\n      options.params.lon = location.lon\r\n      options.params.lat = location.lat\r\n    } else{\r\n      options.params.q = 'Moscow'\r\n    }\r\n\r\n    axios.request(options).then(res => {\r\n      console.log(res.data);\r\n      let dt = res.data.list[0].dt\r\n      let weather = res.data.list[0].weather[0]\r\n      let temp = res.data.list[0].main.temp\r\n\r\n      weather.dt = dt\r\n\r\n      if (state.inpCity) {\r\n\r\n        dispatch({\r\n          type: 'SET_CITY',\r\n          payload: state.inpCity\r\n        })\r\n        \r\n      } else {\r\n\r\n        dispatch({\r\n          type: 'SET_CITY',\r\n          payload: res.data.city.name\r\n        })\r\n      }\r\n\r\n      dispatch({\r\n        type: 'SET_WEATHER',\r\n        payload: weather\r\n      })\r\n\r\n      dispatch({\r\n        type: 'SET_TEMPERATURE',\r\n        payload: toCelcius(temp)\r\n      })\r\n\r\n    }).catch(error => {\r\n      console.error('error');\r\n      \r\n      // dispatch({\r\n      //   type: 'SET_CITY',\r\n      //   payload: 'Not Found'\r\n      // })\r\n\r\n      \r\n    });\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    getGeolocation()\r\n    // getWeather()\r\n  }, [state.inpCity])\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"window\">\r\n        <input value={state.inpCity}\r\n         onChange={onChangeCity}\r\n          placeholder='ГОРОД'\r\n           type=\"text\"\r\n            className=\"input__city\" />\r\n        <div className=\"city\">\r\n          {state.city}\r\n        </div>\r\n        <div className=\"temperature\">\r\n          <AnimatedNumber\r\n            animateToNumber={state.temperature}\r\n            animationType={\"random\"}\r\n          />\r\n        </div>\r\n        {Object.keys(state.weather).length > 1 ? \r\n        (<div className=\"weath\">\r\n          <div className=\"icon\">\r\n            <img src={getIcon(state.weather)} alt=\"\" />\r\n          </div>\r\n          <div className=\"description\">\r\n            {state.weather.description}\r\n          </div>\r\n        </div>) : ''}\r\n        \r\n        \r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}