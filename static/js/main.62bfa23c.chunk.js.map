{"version":3,"sources":["reducer.js","components/Temperature/index.jsx","components/City/index.jsx","components/func.js","components/Weather/index.jsx","App.jsx","index.js"],"names":["state","action","type","temperature","payload","position","lon","lat","city","inpCity","isLoading","weather","forecast","Temperature","memo","temp","className","animateToNumber","animationType","City","toCelcius","Math","round","Weather","useEffect","map","el","obj","console","log","dt_txt","match","main","Object","keys","length","src","data","hours","Date","dt","getHours","path","getIcon","alt","description","App","useReducer","reducer","dispatch","getWeather","a","location","options","method","url","params","appid","lang","q","axios","request","then","res","list","slice","name","catch","error","navigator","geolocation","getCurrentPosition","pos","crd","coords","geo","latitude","longitude","err","enableHighAccuracy","timeout","maximumAge","value","onChange","e","target","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62bfa23c.chunk.js","sourcesContent":["export default (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_TEMPERATURE':\r\n      return {\r\n        ...state,\r\n        temperature: action.payload,\r\n      };\r\n\r\n    case 'SET_POSITION':\r\n      return {\r\n        ...state,\r\n        position: {\r\n          lon: action.payload.lon,\r\n          lat: action.payload.lat,\r\n        },\r\n      };\r\n    case 'SET_CITY':\r\n      return {\r\n        ...state,\r\n        city: action.payload,\r\n      };\r\n    case 'SET_INPUT_CITY':\r\n      return {\r\n        ...state,\r\n        inpCity: action.payload,\r\n      };\r\n    case 'SET_LOADING':\r\n      return {\r\n        ...state,\r\n        isLoading: {\r\n          temperature: action.payload?.temperature,\r\n          city: action.payload?.city,\r\n        },\r\n      };\r\n\r\n    case 'SET_WEATHER':\r\n      return {\r\n        ...state,\r\n        weather: action.payload,\r\n      };\r\n\r\n    case 'SET_FORECAST':\r\n      return {\r\n        ...state,\r\n        forecast: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { memo } from \"react\"\r\nimport AnimatedNumber from \"react-animated-numbers\"\r\n\r\nconst Temperature = memo(({temp}) => {\r\n  return (\r\n    <div className=\"temperature\">\r\n          <AnimatedNumber\r\n            animateToNumber={temp}\r\n            animationType={\"random\"}\r\n          />\r\n        </div>\r\n  )\r\n})\r\n\r\nexport default Temperature\r\n","import { memo } from \"react\"\r\n\r\nconst City = memo(({city}) => {\r\n  return (\r\n    <div className=\"city\">\r\n      {city}\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default City\r\n","function toCelcius(temp) {\r\n  if (!temp || typeof temp !== 'number') return 0;\r\n  return Math.round(temp - 273.15);\r\n}\r\n\r\nexport { toCelcius };\r\n","import { memo, useEffect } from \"react\"\r\nimport { toCelcius } from \"../func\";\r\nimport { City, Temperature} from \"../index\";\r\n\r\nconst Weather = memo(({city, temperature, weather, forecast}) => {\r\n  function getIcon(data) {\r\n    const hours = new Date(data.dt).getHours()\r\n    let path = 'react-weather/img/weather_icons/animated/'\r\n\r\n    if (hours < 20 && hours >= 6) {\r\n      switch (data.main) {\r\n        case 'Thunderstorm':\r\n          return path + 'thunder.svg'\r\n      \r\n        case 'Drizzle':\r\n          return path + 'rainy-4.svg'\r\n      \r\n        case 'Rain':\r\n          return path + 'rainy-6.svg'\r\n      \r\n        case 'Snow':\r\n          return path + 'snowy-5.svg'\r\n      \r\n        case 'Clear':\r\n          return path + 'day.svg'\r\n      \r\n        case 'Clouds':\r\n          return path + 'cloudy.svg'\r\n      \r\n        default:\r\n          return ''\r\n      }\r\n    } else{\r\n      switch (data.main) {\r\n        case 'Thunderstorm':\r\n          return path + 'thunder.svg'\r\n      \r\n        case 'Drizzle':\r\n          return path + 'rainy-4.svg'\r\n      \r\n        case 'Rain':\r\n          return path + 'rainy-6.svg'\r\n      \r\n        case 'Snow':\r\n          return path + 'snowy-5.svg'\r\n      \r\n        case 'Clear':\r\n          return path + 'night.svg'\r\n      \r\n        case 'Clouds':\r\n          return path + 'cloudy-night-3.svg'\r\n      \r\n        default:\r\n          return ''\r\n      }\r\n    }\r\n\r\n    \r\n    \r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n  forecast = forecast.map(el => {\r\n    const obj = {}\r\n    console.log(el);\r\n    obj.dt_txt = el.dt_txt.match(/\\d\\d:\\d\\d/)[0]\r\n    obj.temp = toCelcius(el.main.temp)\r\n    obj.weather = el.weather\r\n  })    \r\n  }, [forecast])\r\n\r\n  console.log(forecast);\r\n\r\n  return (\r\n    <>\r\n      <City city={city} />\r\n        <Temperature temp={temperature} />\r\n        {Object.keys(weather).length > 1 ? \r\n        (<div className=\"weath\">\r\n          <div className=\"icon\">\r\n            <img src={getIcon(weather)} alt=\"nope\" />\r\n          </div>\r\n          <div className=\"description\">\r\n            {weather.description}\r\n          </div>\r\n        </div>) : ''}\r\n    </>\r\n  )\r\n})\r\n\r\nexport default Weather\r\n","import { useEffect, useReducer} from \"react\";\r\nimport axios from \"axios\";\r\nimport reducer from './reducer'\r\n\r\nimport './scss/App.scss'\r\n\r\nimport { Weather } from \"./components\";\r\nimport { toCelcius } from \"./components/func\";\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    city: '',\r\n    temperature: 0,\r\n    inpCity: '',\r\n    position: {},\r\n    isLoading: {},\r\n    weather: {},\r\n    forecast: []\r\n  })\r\n\r\n \r\n\r\n\r\n  function getGeolocation() {\r\n    console.log('check geo');\r\n    if (\"geolocation\" in navigator){\r\n      navigator.geolocation.getCurrentPosition(pos => {\r\n        console.log(pos);\r\n       const crd = pos.coords\r\n       let geo = {\r\n         lat: crd.latitude,\r\n         lon: crd.longitude\r\n       }\r\n       dispatch({\r\n         type: 'SET_POSITION',\r\n         payload: geo\r\n       })\r\n       // setPosition(geo)\r\n       console.log(state.position);\r\n       console.log('position success');\r\n \r\n       getWeather(geo)\r\n \r\n \r\n     }, (err) => {\r\n       console.log('position error');\r\n       console.log(err);\r\n       dispatch({\r\n         type: 'SET_POSITION',\r\n         payload: {}\r\n       })\r\n       getWeather()\r\n       // setPosition({})\r\n     }, { \r\n       enableHighAccuracy: true,\r\n       timeout: 50000,\r\n       maximumAge: 5000\r\n     })\r\n    } else {\r\n      console.log('geo false');\r\n      getWeather()\r\n    }\r\n\r\n     \r\n\r\n  }\r\n\r\n  function onChangeCity(e) {\r\n    // setInpCity(e.target.value)\r\n    dispatch({\r\n      type: 'SET_INPUT_CITY',\r\n      payload: e.target.value\r\n    })\r\n    \r\n  }\r\n\r\n  async function getWeather(location = {}) {\r\n    const options = {\r\n      method: 'GET',\r\n      url: 'https://api.openweathermap.org/data/2.5/forecast',\r\n      params: {\r\n        appid: 'a482831921ae4546e7f36c4415ede7b8',\r\n        lang: 'ru',\r\n        temp: 'Celsius',\r\n        \r\n      }\r\n    };\r\n\r\n    if (state.inpCity){\r\n      options.params.q = state.inpCity\r\n    } else if(state.position.lon){\r\n      options.params.lon = state.position.lon\r\n      options.params.lat = state.position.lat\r\n\r\n    } else if(location.lon){\r\n      options.params.lon = location.lon\r\n      options.params.lat = location.lat\r\n    } else{\r\n      options.params.q = 'Moscow'\r\n    }\r\n\r\n    axios.request(options).then(res => {\r\n      // console.log(res.data);\r\n      let dt = res.data.list[0].dt\r\n      let forecast = res.data.list.slice(0,10)\r\n      // console.log(forecast);\r\n      let weather = res.data.list[0].weather[0]\r\n      let temp = res.data.list[0].main.temp\r\n\r\n      weather.dt = dt\r\n\r\n      if (state.inpCity) {\r\n\r\n        dispatch({\r\n          type: 'SET_CITY',\r\n          payload: state.inpCity\r\n        })\r\n        \r\n      } else {\r\n\r\n        dispatch({\r\n          type: 'SET_CITY',\r\n          payload: res.data.city.name\r\n        })\r\n      }\r\n\r\n      dispatch({\r\n        type: 'SET_WEATHER',\r\n        payload: weather\r\n      })\r\n      dispatch({\r\n        type: 'SET_FORECAST',\r\n        payload: forecast\r\n      })\r\n\r\n      dispatch({\r\n        type: 'SET_TEMPERATURE',\r\n        payload: toCelcius(temp)\r\n      })\r\n\r\n    }).catch(error => {\r\n      console.error('error');\r\n      \r\n      // dispatch({\r\n      //   type: 'SET_CITY',\r\n      //   payload: 'Not Found'\r\n      // })\r\n\r\n      \r\n    });\r\n  }\r\n\r\n\r\n/* \r\n  FIXME: Constantly requests geolocation\r\n*/\r\n\r\n  useEffect(() => {\r\n    getGeolocation()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    getWeather(state.position)\r\n  }, [state.inpCity])\r\n\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"window\">\r\n        <input value={state.inpCity}\r\n          onChange={onChangeCity}\r\n          placeholder='ГОРОД'\r\n          type=\"text\"\r\n          className=\"input__city\"\r\n        />\r\n        \r\n        <Weather city={state.city} temperature={state.temperature} weather={state.weather} forecast={state.forecast} />\r\n        \r\n        \r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}